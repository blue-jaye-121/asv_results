{
    "benchmarks.TimeSuite.time_cape_cin": {
        "code": "class TimeSuite:\n    def time_cape_cin(self):\n        \"\"\"Benchmark cape_cin.\"\"\"\n        parcel_prof = parcel_profile(self.p, self.t[0], self.td[0])\n        cape_cin(self.p, self.t, self.td, parcel_prof)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_cape_cin",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e55fc7e895498d06b6755257ab522e6e0feb03f671ed9bab620939ed709abace",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_el": {
        "code": "class TimeSuite:\n    def time_el(self):\n        \"\"\"Benchmark el..\"\"\"\n        el(self.p, self.t, self.td)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_el",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d1e87e3c3e48d9e41a43e0bdea7340b98be5038faf56d605c0efe97d55ae5390",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_lcl": {
        "code": "class TimeSuite:\n    def time_lcl(self):\n        \"\"\"Benchmark LCL calculation.\"\"\"\n        lcl(self.p[0], self.t[0], self.td[0])\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_lcl",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5dd51d5beec84f51a364250699d3a4f99b79633b1a9c0b02a1869b72116843e1",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_lcl_grid": {
        "code": "class TimeSuite:\n    def time_lcl_grid(self):\n        \"\"\"Benchmark LCL calculation on a grid.\"\"\"\n        lcl(self.slice.isobaric, self.slice.temperature, self.slice.dewpoint)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_lcl_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4a277b8e374c51dfe7585b217bd1fd4b75792f7304c9f938452b4cc4df285866",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_moist_lapse": {
        "code": "class TimeSuite:\n    def time_moist_lapse(self):\n        \"\"\"Benchmark moist lapse calculation.\"\"\"\n        moist_lapse(self.p, self.t[0])\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_moist_lapse",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "ab80a4e4a6cbb3ad53fe49016a3c7a42a40106534cd4375cafd2eca6fb23020c",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_saturation_vapor_pressure": {
        "code": "class TimeSuite:\n    def time_saturation_vapor_pressure(self):\n        \"\"\"Benchmark saturation vapor pressure calculation.\"\"\"\n        saturation_vapor_pressure(self.t[0])\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_saturation_vapor_pressure",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "875e3612f980ee64fb9fbbdf19e2e7047a270b387c8a196923a19e973960dbf0",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_saturation_vapor_pressure_grid": {
        "code": "class TimeSuite:\n    def time_saturation_vapor_pressure_grid(self):\n        \"\"\"Benchmark saturation vapor pressure on a grid.\"\"\"\n        saturation_vapor_pressure(self.slice.temperature)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_saturation_vapor_pressure_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "907976f448bd5ac61107abced0671001f1ee20048d926409684ead4f2538c213",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_density_grid": {
        "code": "class TimeSuite:\n    def time_density_grid(self):\n        \"\"\"Benchmarking density calculation on a grid\"\"\"\n        density(self.slice.pressure, self.slice.temperature, self.slice.mixingRatio);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_density_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "04e7b64f944994987d70071e70adf8a433c2d7446a6bc502d4c73296507c41d7",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_dry_lapse": {
        "code": "class TimeSuite:\n    def time_dry_lapse(self):\n        \"\"\"Benchmarking the dry lapse calculation\"\"\"\n        dry_lapse(self.pressure, self.randomT[0]);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_dry_lapse",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "019d5eedacf7c318bd9ac820f05c1622e3f36706bc2866dbf9fff8173aa9dc30",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential": {
        "code": "class TimeSuite:\n    def time_height_to_geopotential(self):\n        \"\"\"Benchmarking the height to geopotenial calculation with 10000 steps\"\"\"\n        height_to_geopotential(self.height);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "42b03e8b5c10c48f8fdb53198c252154c8f0be3e3e658878d955fcce168e13bd",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_potential_temperature_grid": {
        "code": "class TimeSuite:\n    def time_potential_temperature_grid(self):\n        \"\"\"Benchmarking the potential temperature calculation on a grid\"\"\"\n        potential_temperature(self.slice.pressure, self.slice.temperature);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_potential_temperature_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "536e9e27e74038dbea1c1e40fdf0ce43ec6c3e9a407f0241c38fb11f03ddae46",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_static_stability_grid": {
        "code": "class TimeSuite:\n    def time_static_stability_grid(self):\n        \"\"\"Benchmarking static stability calculation on a grid\"\"\"\n        static_stability(self.pressure, self.randomT);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_static_stability_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e62d01fe9c29b7c7ae7d4866cbeed9b74acc2a6ec492406344898988486a4f08",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic": {
        "code": "class TimeSuite:\n    def time_thickness_hydrostatic(self):\n        \"\"\"Benchmarking hydrostatic thickness calculation\"\"\"\n        thickness_hydrostatic(self.pressure, self.randomT, self.randomMixingRatio);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "6aea544dd3e7df486923c98ff05888f47bb5c3a6d32e193d2f2db5f5fe191db4",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh_grid": {
        "code": "class TimeSuite:\n    def time_dewpoint_from_rh_grid(self):\n        \"\"\"Benchmarking relative humidity from calculated rh on a grid\"\"\"\n        dewpoint_from_relative_humidity(self.slice.temperature, self.slice.relativeHumidity);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f3d5ca2d387a386463d079437959bbbb6dd3f5ec1fb9aeb88e33abc448fe7bce",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_dewpoint_grid": {
        "code": "class TimeSuite:\n    def time_dewpoint_grid(self):\n        \"\"\"Benchmarking dewpoint from vapor pressure on a grid\"\"\"\n        dewpoint(self.slice.vaporPressure);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "823866296c9a03e68dc40fc54b93433009be0932fd72d46655933f89551eea50",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_precipitable_water": {
        "code": "class TimeSuite:\n    def time_precipitable_water(self):\n        \"\"\"Benchmarking precipitable water calculation\"\"\"\n        precipitable_water(self.pressure, self.randomTd);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_precipitable_water",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "40d69133a6811d2b47671266e3fd4400547e89e8fad16d43a65ef63cbebcddcf",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio_grid": {
        "code": "class TimeSuite:\n    def time_rh_from_mixing_ratio_grid(self):\n        \"\"\"Benchmarking relative humidity from mixing ratio on a grid\"\"\"\n        relative_humidity_from_mixing_ratio(self.slice.pressure, self.slice.temperature, self.slice.mixingRatio);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e46e521d5b175d0bc9633513f491f6810b67bdf2cc81ad67a94e1ebdfb0d0ba2",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_scale_height": {
        "code": "class TimeSuite:\n    def time_scale_height(self):\n        \"\"\"Benchmarking the calculation for the scale height of a layer\"\"\"\n        scale_height(self.t[0], self.t[5]);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_scale_height",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "1c29d799cd170fca47ff4b23d2a17afa975a521735abe418f849e942a83c1ea0",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature": {
        "code": "class TimeSuite:\n    def time_virtual_temperature(self):\n        \"\"\"Benchmark virtual temperature for one value.\"\"\"\n        virtual_temperature(self.t[0], self.mixingRatio[0] * units(\"g/kg\"));\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c40bc366070af90b205665ba995b1463240fabdce308c801ce5219ddc9c4f823",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature_100_values": {
        "code": "class TimeSuite:\n    def time_virtual_temperature_100_values(self):\n        \"\"\"Benchmarking the virtual temperature for 100 array values\"\"\"\n        virtual_temperature(self.randomT, self.randomMixingRatio * units(\"g/kg\"));\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature_100_values",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "528bf0439b1c35ba4f7dfc5a9c03af0b004dcd785434a27420d517a184b8700e",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature_grid": {
        "code": "class TimeSuite:\n    def time_virtual_temperature_grid(self):\n        \"\"\"Benchmark virtual temperature on a grid\"\"\"\n        virtual_temperature(self.slice.temperature, self.slice.mixingRatio * units(\"g/kg\"));\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "adeecf04cd0636bf75992b41dc68de496f6b0ad4708ee5e92ea91dba63354397",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_melting": {
        "code": "class TimeSuite:\n    def time_water_latent_heat_melting(self):\n        \"\"\"Benchmarking the latent heat of melting water for water\"\"\"\n        water_latent_heat_melting(self.randomT);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_melting",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "140f7cb28f1ac50b4f361422e286bbfa10e703e748f3d9c9beb8b7b0eaf0a225",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature_grid": {
        "code": "class TimeSuite:\n    def time_wet_bulb_temperature_grid(self):\n        \"\"\"Benchmarking wet bulb temperature calculation\"\"\"\n        wet_bulb_temperature(self.pressure[0], self.t[0], self.randomTd[0]);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2b3e0be04b83901354cd876d5e3cf878f3335a7541c4a08e54d40d825a9b4939",
        "warmup_time": -1
    },
    "version": 2
}