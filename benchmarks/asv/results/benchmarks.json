{
    "benchmarks.TimeSuite.time_cape_cin": {
        "code": "class TimeSuite:\n    def time_cape_cin(self):\n        \"\"\"Benchmark cape_cin.\"\"\"\n        parcel_prof = parcel_profile(self.p, self.t[0], self.td[0])\n        cape_cin(self.p, self.t, self.td, parcel_prof)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_cape_cin",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e55fc7e895498d06b6755257ab522e6e0feb03f671ed9bab620939ed709abace",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_el": {
        "code": "class TimeSuite:\n    def time_el(self):\n        \"\"\"Benchmark el..\"\"\"\n        el(self.p, self.t, self.td)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_el",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d1e87e3c3e48d9e41a43e0bdea7340b98be5038faf56d605c0efe97d55ae5390",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_lcl": {
        "code": "class TimeSuite:\n    def time_lcl(self):\n        \"\"\"Benchmark LCL calculation.\"\"\"\n        lcl(self.p[0], self.t[0], self.td[0])\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_lcl",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5dd51d5beec84f51a364250699d3a4f99b79633b1a9c0b02a1869b72116843e1",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_lcl_grid": {
        "code": "class TimeSuite:\n    def time_lcl_grid(self):\n        \"\"\"Benchmark LCL calculation on a grid.\"\"\"\n        lcl(self.slice.isobaric, self.slice.temperature, self.slice.dewpoint)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_lcl_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4a277b8e374c51dfe7585b217bd1fd4b75792f7304c9f938452b4cc4df285866",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_moist_lapse": {
        "code": "class TimeSuite:\n    def time_moist_lapse(self):\n        \"\"\"Benchmark moist lapse calculation.\"\"\"\n        moist_lapse(self.p, self.t[0])\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_moist_lapse",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "ab80a4e4a6cbb3ad53fe49016a3c7a42a40106534cd4375cafd2eca6fb23020c",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_saturation_vapor_pressure": {
        "code": "class TimeSuite:\n    def time_saturation_vapor_pressure(self):\n        \"\"\"Benchmark saturation vapor pressure calculation.\"\"\"\n        saturation_vapor_pressure(self.t[0])\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_saturation_vapor_pressure",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "875e3612f980ee64fb9fbbdf19e2e7047a270b387c8a196923a19e973960dbf0",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_saturation_vapor_pressure_grid": {
        "code": "class TimeSuite:\n    def time_saturation_vapor_pressure_grid(self):\n        \"\"\"Benchmark saturation vapor pressure on a grid.\"\"\"\n        saturation_vapor_pressure(self.slice.temperature)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_saturation_vapor_pressure_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "907976f448bd5ac61107abced0671001f1ee20048d926409684ead4f2538c213",
        "warmup_time": -1
    },
    "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_frequency": {
        "code": "class TimeSuite:\n    def time_brunt_vaisala_frequency(self):\n        \"\"\"Benchmarking the brunt vaisala frequency calculation\"\"\"\n        mpcalc.brunt_vaisala_frequency(self.ds.height, self.ds.theta);\n\n    def setup(self):\n        self.ds = createXArray();\n        self.slice = self.ds.isel(pressure = 1000)",
        "min_run_count": 2,
        "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_frequency",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "bound_layer_turbulence_benchmarks.TimeSuite.time_gradient_richardson_number": {
        "code": "class TimeSuite:\n    def time_gradient_richardson_number(self):\n        \"\"\"Benchmarking the gradient richardson number calculation\"\"\"\n        mpcalc.gradient_richardson_number(self.ds.height, self.ds.theta, self.ds.uwind, self.ds.vwind);\n\n    def setup(self):\n        self.ds = createXArray();\n        self.slice = self.ds.isel(pressure = 1000)",
        "min_run_count": 2,
        "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_gradient_richardson_number",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "bound_layer_turbulence_benchmarks.TimeSuite.time_tke": {
        "code": "class TimeSuite:\n    def time_tke(self):\n        \"\"\"Benchmarking the turbulence kinetic energy calculation\"\"\"\n        mpcalc.tke(self.slice.uwind, self.slice.vwind, self.slice.wwind);\n\n    def setup(self):\n        self.ds = createXArray();\n        self.slice = self.ds.isel(pressure = 1000)",
        "min_run_count": 2,
        "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_tke",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_density_grid": {
        "code": "class TimeSuite:\n    def time_density_grid(self):\n        \"\"\"Benchmarking density calculation on a grid\"\"\"\n        mpcalc.density(self.slice.pressure, self.slice.temperature, self.slice.mixingRatio);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_density_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_dry_lapse": {
        "code": "class TimeSuite:\n    def time_dry_lapse(self):\n        \"\"\"Benchmarking the dry lapse calculation\"\"\"\n        mpcalc.dry_lapse(self.pressure, self.randomT[0]);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_dry_lapse",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential": {
        "code": "class TimeSuite:\n    def time_height_to_geopotential(self):\n        \"\"\"Benchmarking the height to geopotenial calculation with 10000 steps\"\"\"\n        mpcalc.height_to_geopotential(self.height);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_potential_temperature_grid": {
        "code": "class TimeSuite:\n    def time_potential_temperature_grid(self):\n        \"\"\"Benchmarking the potential temperature calculation on a grid\"\"\"\n        mpcalc.potential_temperature(self.slice.pressure, self.slice.temperature);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_potential_temperature_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_static_stability_grid": {
        "code": "class TimeSuite:\n    def time_static_stability_grid(self):\n        \"\"\"Benchmarking static stability calculation on a grid\"\"\"\n        mpcalc.static_stability(self.pressure, self.randomT);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_static_stability_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic": {
        "code": "class TimeSuite:\n    def time_thickness_hydrostatic(self):\n        \"\"\"Benchmarking hydrostatic thickness calculation\"\"\"\n        mpcalc.thickness_hydrostatic(self.pressure, self.randomT, self.randomMixingRatio);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_absolute_vorticity": {
        "code": "class TimeSuite:\n    def time_absolute_vorticity(self):\n        \"\"\"benchmarking absolute momentum calculation\"\"\"\n        mpcalc.absolute_vorticity(self.slice.uwind, self.slice.vwind);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n    \n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.height_denver05282019 = mpcalc.pressure_to_height_std(self.pressure_denver05282019) * units.km;\n    \n        self.ds = createXArray();\n        self.slice = self.ds.isel()",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_absolute_vorticity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_advection": {
        "code": "class TimeSuite:\n    def time_advection(self):\n        \"\"\"Benchmarking the advection calculation\"\"\"\n        mpcalc.advection(self.ds.temperature, self.ds.uwind, self.ds.vwind);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n    \n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.height_denver05282019 = mpcalc.pressure_to_height_std(self.pressure_denver05282019) * units.km;\n    \n        self.ds = createXArray();\n        self.slice = self.ds.isel()",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_advection",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_ageostrophic_wind": {
        "code": "class TimeSuite:\n    def time_ageostrophic_wind(self):\n        \"\"\"Benchmarking ageostrophic wind calculation\"\"\"\n        mpcalc.ageostrophic_wind(self.ds.z_dim, self.ds.uwind, self.ds.vwind);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n    \n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.height_denver05282019 = mpcalc.pressure_to_height_std(self.pressure_denver05282019) * units.km;\n    \n        self.ds = createXArray();\n        self.slice = self.ds.isel()",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_ageostrophic_wind",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_frontogenesis": {
        "code": "class TimeSuite:\n    def time_frontogenesis(self):\n        \"\"\"Benchmarking the calculation of frontogenesis of a t field\"\"\"\n        mpcalc.frontogenesis(self.ds.theta, self.ds.uwind, self.ds.vwind);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n    \n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.height_denver05282019 = mpcalc.pressure_to_height_std(self.pressure_denver05282019) * units.km;\n    \n        self.ds = createXArray();\n        self.slice = self.ds.isel()",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_frontogenesis",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_barotropic": {
        "code": "class TimeSuite:\n    def time_potential_vorticity_barotropic(self):\n        \"\"\"Benchmarking the barotropic potential vorticity calculation\"\"\"\n        mpcalc.potential_vorticity_barotropic(self.ds.z_dim, self.ds.uwind, self.ds.vwind);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n    \n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.height_denver05282019 = mpcalc.pressure_to_height_std(self.pressure_denver05282019) * units.km;\n    \n        self.ds = createXArray();\n        self.slice = self.ds.isel()",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_barotropic",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_q_vector": {
        "code": "class TimeSuite:\n    def time_q_vector(self):\n        \"\"\"Benchmarking q vector calculation\"\"\"\n        mpcalc.q_vector(self.ds.uwind, self.ds.vwind, self.ds.temperature, 1000 * units.hPa);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n    \n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.height_denver05282019 = mpcalc.pressure_to_height_std(self.pressure_denver05282019) * units.km;\n    \n        self.ds = createXArray();\n        self.slice = self.ds.isel()",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_q_vector",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_total_deformation": {
        "code": "class TimeSuite:\n    def time_total_deformation(self):\n        \"\"\"Benchmarking total deformation calculation\"\"\"\n        mpcalc.total_deformation(self.ds.uwind, self.ds.vwind);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n    \n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.height_denver05282019 = mpcalc.pressure_to_height_std(self.pressure_denver05282019) * units.km;\n    \n        self.ds = createXArray();\n        self.slice = self.ds.isel()",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_total_deformation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_vorticity": {
        "code": "class TimeSuite:\n    def time_vorticity(self):\n        \"\"\"Benchmarking vorticity calculation\"\"\"\n        mpcalc.vorticity(self.ds.uwind, self.ds.vwind);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n    \n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.height_denver05282019 = mpcalc.pressure_to_height_std(self.pressure_denver05282019) * units.km;\n    \n        self.ds = createXArray();\n        self.slice = self.ds.isel()",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_vorticity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh_grid": {
        "code": "class TimeSuite:\n    def time_dewpoint_from_rh_grid(self):\n        \"\"\"Benchmarking relative humidity from calculated rh on a grid\"\"\"\n        mpcalc.dewpoint_from_relative_humidity(self.slice.temperature, self.slice.relativeHumidity);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_dewpoint_grid": {
        "code": "class TimeSuite:\n    def time_dewpoint_grid(self):\n        \"\"\"Benchmarking dewpoint from vapor pressure on a grid\"\"\"\n        mpcalc.dewpoint(self.slice.vaporPressure);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_precipitable_water": {
        "code": "class TimeSuite:\n    def time_precipitable_water(self):\n        \"\"\"Benchmarking precipitable water calculation\"\"\"\n        mpcalc.precipitable_water(self.pressure, self.randomTd);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_precipitable_water",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio_grid": {
        "code": "class TimeSuite:\n    def time_rh_from_mixing_ratio_grid(self):\n        \"\"\"Benchmarking relative humidity from mixing ratio on a grid\"\"\"\n        mpcalc.relative_humidity_from_mixing_ratio(self.slice.pressure, self.slice.temperature, self.slice.mixingRatio);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_scale_height": {
        "code": "class TimeSuite:\n    def time_scale_height(self):\n        \"\"\"Benchmarking the calculation for the scale height of a layer\"\"\"\n        mpcalc.scale_height(self.t[0], self.t[5]);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_scale_height",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature": {
        "code": "class TimeSuite:\n    def time_virtual_temperature(self):\n        \"\"\"Benchmark virtual temperature for one value.\"\"\"\n        mpcalc.virtual_temperature(self.t[0], self.mixingRatio[0] * units(\"g/kg\"));\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature_100_values": {
        "code": "class TimeSuite:\n    def time_virtual_temperature_100_values(self):\n        \"\"\"Benchmarking the virtual temperature for 100 array values\"\"\"\n        mpcalc.virtual_temperature(self.randomT, self.randomMixingRatio * units(\"g/kg\"));\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature_100_values",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature_grid": {
        "code": "class TimeSuite:\n    def time_virtual_temperature_grid(self):\n        \"\"\"Benchmark virtual temperature on a grid\"\"\"\n        mpcalc.virtual_temperature(self.slice.temperature, self.slice.mixingRatio * units(\"g/kg\"));\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature_grid": {
        "code": "class TimeSuite:\n    def time_wet_bulb_temperature_grid(self):\n        \"\"\"Benchmarking wet bulb temperature calculation\"\"\"\n        mpcalc.wet_bulb_temperature(self.pressure[0], self.t[0], self.randomTd[0]);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_bulk_shear": {
        "code": "class TimeSuite:\n    def time_bulk_shear(self):\n        \"\"\"Benchmarking calculating the bulk shear of a profile\"\"\"\n        mpcalc.bulk_shear(self.pressure_denver05282019, self.u, self.v);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_bulk_shear",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_ccl": {
        "code": "class TimeSuite:\n    def time_ccl(self):\n        \"\"\"Benchmarking calculating the convective condensation level of a profile\"\"\"\n        mpcalc.ccl(self.pressure_denver05282019, self.temperature_denver05282019, self.dewpoint_denver05282019);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_ccl",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_most_unstable_parcel": {
        "code": "class TimeSuite:\n    def time_most_unstable_parcel(self):\n        \"\"\"Benchmarking the calculation to find the most unstable parcel\"\"\"\n        mpcalc.most_unstable_parcel(self.pressure_denver05282019, self.temperature_denver05282019, self.dewpoint_denver05282019);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_most_unstable_parcel",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_parcel_profile_with_lcl": {
        "code": "class TimeSuite:\n    def time_parcel_profile_with_lcl(self):\n        \"\"\"Benchmarking the atmospheric parcel profile with the lcl\"\"\"\n        mpcalc.parcel_profile_with_lcl(self.pressure_denver05282019, self.temperature_denver05282019, self.dewpoint_denver05282019);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = mpcalc.wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_parcel_profile_with_lcl",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.03",
        "warmup_time": -1
    },
    "version": 2
}