{"project": "metpy", "project_url": "https://unidata.github.io/MetPy/latest/", "show_commit_url": "http://github.com/dcamron/metpy/commit/", "hash_length": 8, "revision_to_hash": {"327": "ab6c1dce403f7403c3ceb588536e8dac44208c63", "535": "ac1fa42d9852eb0140cbdf42e2223b839ba13fde", "635": "5b4b97a6b9ef97f35fac6643b1d9caa395dbff55", "680": "db120ecf9d6094c3c0c3f2778d5cd4a4c776c773", "790": "363e313c36c0165991b07a219783774c97a38af8", "872": "421fcbc3f82fc104a2f48ea4d3b7b387cd945999", "973": "81c28f9b3547d0e08ce5d240354c69aa73f8b041", "994": "fd6f68542e1c1dbdb2ca9e68d24a1fc21a925649", "1010": "63a5224ce980cb44086685fe01eeaaed9998a698", "1111": "c2c19a3014bfb5f0d6b95bbbf9c8f9caadb17366", "1310": "2b685023351a89168a7e06c3858ff3493af670e7", "1331": "91ddb99935d9d0358b6b697bc1a0eabe9c96b145", "1574": "c5249c22782ca628fa328bbc28d98017dd868555", "1670": "d29088091fce085f52892539412e54c9eb02ab2e", "1786": "ba13b4c307791de6bfd69386959fe3da4efdeeeb", "2048": "987935135ac4770bd39c2902d48643866f29ef7e", "2157": "f47ebee7ce199b9d11d9db8fdf5cd258fd663052", "2159": "e4161106b5e060f525c58549f24efddd63aa35b6", "2246": "cee9d4de5bc37a4cd2efc381f0a08f3a53d00940", "2545": "a31af2335dfd3d28b6fff91ae21a86e2b565fa70", "2580": "8c1ca0ab748a253cc254317638bc080cfe323a3c", "2730": "0653de86b35b4c44ac7e6d47385d9b34cc822b76", "2825": "852e2cef374da385c0f1d0393bf5ae349dbd3bb7", "3209": "f8d2fcdb46bdfaf978f2b5d59a0d79ae185a1bb3", "3413": "bdc596470c925cdf91eec6df40deb5f638d002ee", "3602": "fabdf834f8717052c761e6b41a96fa064d9d2edb", "3959": "2f4de6683acdabdc87351eeafa58ff69f0904bee", "4397": "df6f7c543ec4278dfda4b609caee5dc232d52e41", "4553": "ed1b2c3c407b0998926b225167094474365bd763", "5210": "8aa10736846a12e2aa976bbc5fcb591fb54c938c", "5319": "c8379a147d6542b729eed5ccb28b1ff0d883741c", "5511": "71b9b41a6ad63be051ea82e230c3dabf348e0ab1", "5568": "3d0238578e35f87a3bd48d77860d858c4ec3884a", "6030": "7a5e4cc34e62e632017335ca31b343cd79602538", "6046": "059cc1a45be63a2d86ba0801baa624e251bba487", "6047": "aef42710b63828f4d8cb05097f6562141ef293a2", "6052": "fcd883d749c0e596d8950f83ed26c7810e3b280d", "6060": "aa9f3cfd723bf8cef639b4e4aaae174fa223f473", "6092": "698f5441b5896aa6efdf84cdccaf711845a8bd23", "6102": "26e000da4e2f1d7e32e6fb81f88f6f35aa248528", "6127": "8ccabb740dd0afe3194b57b80d3af63b7f78671b", "6128": "d9752c8df8ed70b49da9ed98fb52db24d54a1f71", "6141": "bd432b3068744a605d5e8eeab472b167ba256012", "6145": "ccaf5095715327b75d1a92d98c91616eb607e0c5", "6161": "5fc0531fcab555b37e1c4d33e637ad72702b322c", "6165": "8f510ae51fe0478ba208711bb7468efca0296ade", "6174": "0ed75dc84c74d62be9b29321bb844289ed37eced", "6177": "846a2d0bbe707163e17289e514899e52653dcd09", "6181": "6b4c6ec864f35f6c53754d3708ea95dde519745c", "6261": "3e9fbb1a08394026f68bb6e0bd8921287eccc272", "6271": "e3cca0b58a8d7eaf1ee98b4ef6be287112741bb7", "6273": "e7bdf2cdd4a0b0c8fd2a8642c239efb4386073cf", "6337": "7997bfe23acee896a864e53de74df34b4b0e2714", "6396": "1f7445489d2c928ce89a1708a6f515490f4747ac", "6407": "d00544a29193afb99747ad7297d0b7545b9c89b9", "6411": "34bfda1deaead3fed9070f3a766f7d842373c6d9", "6414": "0f69d91ca72342cb8750ec9cfde5687e9da76dba", "6416": "92cb09c80ce326e4825bc675ee453624a7f81aa7", "6427": "178a1f315415fad7f1565acf3c024d9b1d3202cf", "6442": "adb673a900dbd3b1415176582844f7e8fac9de5d", "6459": "e2a40071e2c928bfe1bc0ea2773589565794b1a6", "6460": "95ed74dad477bb29317ca082e9334e5b42bd6719", "6470": "bbe27bb3c4119a46b103d28954163e2d8991c3b5", "6493": "4f8392dca28f1c1a25def284680bd7e8939aed63", "6515": "ad73a2740fa1f676f4ccdfd7e97c29b088f02692", "6523": "b3f130bb3614cbdc00344a9ed5fb3336b49fe065", "6534": "2bb4d5672700871970644d0ac25b8d0045108db1", "6539": "29f28d4f2d46587fc401b6864fcd3bb6e294eac8", "6550": "86f704d82a140a31ef17cf75c30ed12e6a43bf56", "6564": "22bfb4fab7155706ac0b93f70d41dec201eb0c86", "6578": "8251fed3ff5ff1bbc777f5d9f4d3aff4cb259d76", "6581": "9a46a10e0b2cee3da4fae5bc940973c88ceeedf1", "6605": "31bd7351b0f54e32c7adc20e5d3dde4a4107d350", "6606": "c49e8e3c90d4b7a954695e85c603339aacf53e96", "6642": "82e91cb0679752d856698f686c50f243c9fe7a26", "6643": "ea2fcfc186a45b67a942e9af4c98f6bd4922a025", "6646": "9451c3fd89e8d2e89436b27e4c82fdcbdaa4836c", "6649": "fd1fc47ed54a1c9d8b26d09ff00e85b43672cec6", "6689": "c1cf542fdfe44ef97c765deb4dbaca41a05f4d42", "6695": "ca236e5cd87855ac14a1bd33bb56fcac3949a9cf", "6737": "c4adcaaa5662d2527e5949789736bb48f0ecc34c", "6739": "2fbe8ed7dc3db2b46edc8112ad92407be0ff2bfc", "6746": "0fa6c12e535053bbb0de04172819048e6e7984ee", "6747": "cb699d27120b8360c4dc9dac3cb4593676dab7db", "6755": "e4aa15ffb111d64d8a4615f526ae6147268746ad", "6760": "8238486e6b3888aa10821a5c39f41cd762d3bd14", "6773": "b28b9212e3dbbb1fe6ce545fd34e1549c83206e9", "6779": "3128d2748b145196ad5beb043b4eeb8604cddd45", "6923": "b392c7d1a240d981d7b9390a8c59afb01d33b280"}, "revision_to_date": {"327": 1290647504000, "535": 1430251162000, "635": 1431642261000, "680": 1436841550000, "790": 1454953711000, "872": 1466209240000, "973": 1476220957000, "994": 1478293805000, "1010": 1479485135000, "1111": 1483837378000, "1310": 1491277186000, "1331": 1492799080000, "1574": 1505496880000, "1670": 1509724629000, "1786": 1515091831000, "2048": 1526585670000, "2157": 1535393819000, "2159": 1535408456000, "2246": 1546740725000, "2545": 1569851965000, "2580": 1571350796000, "2730": 1578279372000, "2825": 1579011679000, "3209": 1602221744000, "3413": 1608612372000, "3602": 1619650767000, "3959": 1628528526000, "4397": 1642802071000, "4553": 1649274046000, "5210": 1671832867000, "5319": 1678732726000, "5511": 1684280185000, "5568": 1688691406000, "6030": 1703744858000, "6046": 1704403423000, "6047": 1704403894000, "6052": 1704907218000, "6060": 1705104764000, "6092": 1707858385000, "6102": 1707944418000, "6127": 1708552520000, "6128": 1708554183000, "6141": 1709158990000, "6145": 1709765867000, "6161": 1710361580000, "6165": 1710444021000, "6174": 1711046879000, "6177": 1711057528000, "6181": 1711144978000, "6261": 1715374854000, "6271": 1716646561000, "6273": 1716942856000, "6337": 1720546095000, "6396": 1723843138000, "6407": 1724363894000, "6411": 1724684367000, "6414": 1724794822000, "6416": 1724877949000, "6427": 1724886189000, "6442": 1725039470000, "6459": 1725566137000, "6460": 1725566243000, "6470": 1725911249000, "6493": 1727904228000, "6515": 1729103093000, "6523": 1729542769000, "6534": 1730148420000, "6539": 1730415369000, "6550": 1730917839000, "6564": 1731372767000, "6578": 1732203262000, "6581": 1732310761000, "6605": 1733855270000, "6606": 1733857214000, "6642": 1736202215000, "6643": 1736203408000, "6646": 1736205962000, "6649": 1736457649000, "6689": 1738953630000, "6695": 1739401390000, "6737": 1743616269000, "6739": 1743716913000, "6746": 1744220391000, "6747": 1744309507000, "6755": 1745267416000, "6760": 1745857327000, "6773": 1745961194000, "6779": 1746040064000, "6923": 1748551812000}, "params": {"arch": ["AMD64", "arm64", "x86_64"], "cpu": ["13th Gen Intel(R) Core(TM) i7-1360P", "AMD EPYC 7763 64-Core Processor", "Apple M2 Pro"], "machine": ["Jaye_Dell", "fv-az1336-544", "letterman"], "num_cpu": ["12", "16", "4"], "os": ["Linux 6.11.0-1015-azure", "Windows 11", "macOS Sequoia 15.2"], "ram": ["16379564", "32GB"], "python": ["3.12", "3.13"], "matplotlib": [""], "numpy": [""], "pandas": [""], "pint": [""], "pooch": [""], "pyproj": [""], "scipy": [""], "traitlets": [""], "xarray": [""], "branch": ["HEAD"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1336-544", "num_cpu": "4", "os": "Linux 6.11.0-1015-azure", "ram": "16379564", "python": "3.13", "matplotlib": "", "numpy": "", "pandas": "", "pint": "", "pooch": "", "pyproj": "", "scipy": "", "traitlets": "", "xarray": "", "branch": "HEAD"}, {"arch": "AMD64", "cpu": "13th Gen Intel(R) Core(TM) i7-1360P", "machine": "Jaye_Dell", "num_cpu": "16", "os": "Windows 11", "ram": "32GB", "python": "3.12", "matplotlib": "", "numpy": "", "pandas": "", "pint": "", "pooch": "", "pyproj": "", "scipy": "", "traitlets": "", "xarray": "", "branch": "HEAD"}, {"arch": "arm64", "cpu": "Apple M2 Pro", "machine": "letterman", "num_cpu": "12", "os": "macOS Sequoia 15.2", "ram": "32GB", "python": "3.12", "matplotlib": "", "numpy": "", "pandas": "", "pint": "", "pooch": "", "pyproj": "", "scipy": "", "traitlets": "", "xarray": "", "branch": "HEAD"}], "benchmarks": {"benchmark_dry_thermo.TimeSuite.time_density_grid": {"code": "class TimeSuite:\n    def time_density_grid(self):\n        \"\"\"Benchmarking density calculation on a grid\"\"\"\n        density(self.slice.pressure, self.slice.temperature, self.slice.mixingRatio);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_dry_thermo.TimeSuite.time_density_grid", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "04e7b64f944994987d70071e70adf8a433c2d7446a6bc502d4c73296507c41d7", "warmup_time": -1}, "benchmark_dry_thermo.TimeSuite.time_dry_lapse": {"code": "class TimeSuite:\n    def time_dry_lapse(self):\n        \"\"\"Benchmarking the dry lapse calculation\"\"\"\n        dry_lapse(self.pressure, self.randomT[0]);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_dry_thermo.TimeSuite.time_dry_lapse", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "019d5eedacf7c318bd9ac820f05c1622e3f36706bc2866dbf9fff8173aa9dc30", "warmup_time": -1}, "benchmark_dry_thermo.TimeSuite.time_height_to_geopotential": {"code": "class TimeSuite:\n    def time_height_to_geopotential(self):\n        \"\"\"Benchmarking the height to geopotenial calculation with 10000 steps\"\"\"\n        height_to_geopotential(self.height);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_dry_thermo.TimeSuite.time_height_to_geopotential", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "42b03e8b5c10c48f8fdb53198c252154c8f0be3e3e658878d955fcce168e13bd", "warmup_time": -1}, "benchmark_dry_thermo.TimeSuite.time_potential_temperature_grid": {"code": "class TimeSuite:\n    def time_potential_temperature_grid(self):\n        \"\"\"Benchmarking the potential temperature calculation on a grid\"\"\"\n        potential_temperature(self.slice.pressure, self.slice.temperature);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_dry_thermo.TimeSuite.time_potential_temperature_grid", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "536e9e27e74038dbea1c1e40fdf0ce43ec6c3e9a407f0241c38fb11f03ddae46", "warmup_time": -1}, "benchmark_dry_thermo.TimeSuite.time_static_stability_grid": {"code": "class TimeSuite:\n    def time_static_stability_grid(self):\n        \"\"\"Benchmarking static stability calculation on a grid\"\"\"\n        static_stability(self.pressure, self.randomT);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_dry_thermo.TimeSuite.time_static_stability_grid", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e62d01fe9c29b7c7ae7d4866cbeed9b74acc2a6ec492406344898988486a4f08", "warmup_time": -1}, "benchmark_dry_thermo.TimeSuite.time_thickness_hydrostatic": {"code": "class TimeSuite:\n    def time_thickness_hydrostatic(self):\n        \"\"\"Benchmarking hydrostatic thickness calculation\"\"\"\n        thickness_hydrostatic(self.pressure, self.randomT, self.randomMixingRatio);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.height = np.linspace(0, 10000, 10000) * units.m;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_dry_thermo.TimeSuite.time_thickness_hydrostatic", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6aea544dd3e7df486923c98ff05888f47bb5c3a6d32e193d2f2db5f5fe191db4", "warmup_time": -1}, "benchmark_moist_thermo.TimeSuite.time_dewpoint_from_rh_grid": {"code": "class TimeSuite:\n    def time_dewpoint_from_rh_grid(self):\n        \"\"\"Benchmarking relative humidity from calculated rh on a grid\"\"\"\n        dewpoint_from_relative_humidity(self.slice.temperature, self.slice.relativeHumidity);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_moist_thermo.TimeSuite.time_dewpoint_from_rh_grid", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "f3d5ca2d387a386463d079437959bbbb6dd3f5ec1fb9aeb88e33abc448fe7bce", "warmup_time": -1}, "benchmark_moist_thermo.TimeSuite.time_dewpoint_grid": {"code": "class TimeSuite:\n    def time_dewpoint_grid(self):\n        \"\"\"Benchmarking dewpoint from vapor pressure on a grid\"\"\"\n        dewpoint(self.slice.vaporPressure);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_moist_thermo.TimeSuite.time_dewpoint_grid", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "823866296c9a03e68dc40fc54b93433009be0932fd72d46655933f89551eea50", "warmup_time": -1}, "benchmark_moist_thermo.TimeSuite.time_precipitable_water": {"code": "class TimeSuite:\n    def time_precipitable_water(self):\n        \"\"\"Benchmarking precipitable water calculation\"\"\"\n        precipitable_water(self.pressure, self.randomTd);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_moist_thermo.TimeSuite.time_precipitable_water", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "40d69133a6811d2b47671266e3fd4400547e89e8fad16d43a65ef63cbebcddcf", "warmup_time": -1}, "benchmark_moist_thermo.TimeSuite.time_rh_from_mixing_ratio_grid": {"code": "class TimeSuite:\n    def time_rh_from_mixing_ratio_grid(self):\n        \"\"\"Benchmarking relative humidity from mixing ratio on a grid\"\"\"\n        relative_humidity_from_mixing_ratio(self.slice.pressure, self.slice.temperature, self.slice.mixingRatio);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_moist_thermo.TimeSuite.time_rh_from_mixing_ratio_grid", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e46e521d5b175d0bc9633513f491f6810b67bdf2cc81ad67a94e1ebdfb0d0ba2", "warmup_time": -1}, "benchmark_moist_thermo.TimeSuite.time_scale_height": {"code": "class TimeSuite:\n    def time_scale_height(self):\n        \"\"\"Benchmarking the calculation for the scale height of a layer\"\"\"\n        scale_height(self.t[0], self.t[5]);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_moist_thermo.TimeSuite.time_scale_height", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "1c29d799cd170fca47ff4b23d2a17afa975a521735abe418f849e942a83c1ea0", "warmup_time": -1}, "benchmark_moist_thermo.TimeSuite.time_virtual_temperature": {"code": "class TimeSuite:\n    def time_virtual_temperature(self):\n        \"\"\"Benchmark virtual temperature for one value.\"\"\"\n        virtual_temperature(self.t[0], self.mixingRatio[0] * units(\"g/kg\"));\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_moist_thermo.TimeSuite.time_virtual_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "c40bc366070af90b205665ba995b1463240fabdce308c801ce5219ddc9c4f823", "warmup_time": -1}, "benchmark_moist_thermo.TimeSuite.time_virtual_temperature_100_values": {"code": "class TimeSuite:\n    def time_virtual_temperature_100_values(self):\n        \"\"\"Benchmarking the virtual temperature for 100 array values\"\"\"\n        virtual_temperature(self.randomT, self.randomMixingRatio * units(\"g/kg\"));\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_moist_thermo.TimeSuite.time_virtual_temperature_100_values", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "528bf0439b1c35ba4f7dfc5a9c03af0b004dcd785434a27420d517a184b8700e", "warmup_time": -1}, "benchmark_moist_thermo.TimeSuite.time_virtual_temperature_grid": {"code": "class TimeSuite:\n    def time_virtual_temperature_grid(self):\n        \"\"\"Benchmark virtual temperature on a grid\"\"\"\n        virtual_temperature(self.slice.temperature, self.slice.mixingRatio * units(\"g/kg\"));\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_moist_thermo.TimeSuite.time_virtual_temperature_grid", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "adeecf04cd0636bf75992b41dc68de496f6b0ad4708ee5e92ea91dba63354397", "warmup_time": -1}, "benchmark_moist_thermo.TimeSuite.time_wet_bulb_temperature_grid": {"code": "class TimeSuite:\n    def time_wet_bulb_temperature_grid(self):\n        \"\"\"Benchmarking wet bulb temperature calculation\"\"\"\n        wet_bulb_temperature(self.pressure[0], self.t[0], self.randomTd[0]);\n\n    def setup(self):\n        self.mixingRatio = np.array([8, 7, 9, 10, 11, 12, 13, 14, 15, 16]); #dimensionless\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38., 13.3, 12.7, 2.3, 23.4]) * units.celsius\n        self.randomT = np.random.uniform(low=0.0, high=24.0, size=100) * units.celsius;\n        self.randomMixingRatio = np.random.uniform(low = 0.0, high = 40.0, size=100); #dimensionless\n        self.pressure = np.linspace(1000, 1, 100) * units.hPa;\n        self.randomTd = np.random.uniform(low = 0.0, high = 20.0, size=100) * units.degC\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmark_moist_thermo.TimeSuite.time_wet_bulb_temperature_grid", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "2b3e0be04b83901354cd876d5e3cf878f3335a7541c4a08e54d40d825a9b4939", "warmup_time": -1}, "benchmarks.TimeSuite.time_cape_cin": {"code": "class TimeSuite:\n    def time_cape_cin(self):\n        \"\"\"Benchmark cape_cin.\"\"\"\n        parcel_prof = parcel_profile(self.p, self.t[0], self.td[0])\n        cape_cin(self.p, self.t, self.td, parcel_prof)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_cape_cin", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e55fc7e895498d06b6755257ab522e6e0feb03f671ed9bab620939ed709abace", "warmup_time": -1}, "benchmarks.TimeSuite.time_el": {"code": "class TimeSuite:\n    def time_el(self):\n        \"\"\"Benchmark el..\"\"\"\n        el(self.p, self.t, self.td)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_el", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "d1e87e3c3e48d9e41a43e0bdea7340b98be5038faf56d605c0efe97d55ae5390", "warmup_time": -1}, "benchmarks.TimeSuite.time_lcl": {"code": "class TimeSuite:\n    def time_lcl(self):\n        \"\"\"Benchmark LCL calculation.\"\"\"\n        lcl(self.p[0], self.t[0], self.td[0])\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_lcl", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "5dd51d5beec84f51a364250699d3a4f99b79633b1a9c0b02a1869b72116843e1", "warmup_time": -1}, "benchmarks.TimeSuite.time_lcl_grid": {"code": "class TimeSuite:\n    def time_lcl_grid(self):\n        \"\"\"Benchmark LCL calculation on a grid.\"\"\"\n        lcl(self.slice.isobaric, self.slice.temperature, self.slice.dewpoint)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_lcl_grid", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4a277b8e374c51dfe7585b217bd1fd4b75792f7304c9f938452b4cc4df285866", "warmup_time": -1}, "benchmarks.TimeSuite.time_moist_lapse": {"code": "class TimeSuite:\n    def time_moist_lapse(self):\n        \"\"\"Benchmark moist lapse calculation.\"\"\"\n        moist_lapse(self.p, self.t[0])\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_moist_lapse", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ab80a4e4a6cbb3ad53fe49016a3c7a42a40106534cd4375cafd2eca6fb23020c", "warmup_time": -1}, "benchmarks.TimeSuite.time_saturation_vapor_pressure": {"code": "class TimeSuite:\n    def time_saturation_vapor_pressure(self):\n        \"\"\"Benchmark saturation vapor pressure calculation.\"\"\"\n        saturation_vapor_pressure(self.t[0])\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_saturation_vapor_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "875e3612f980ee64fb9fbbdf19e2e7047a270b387c8a196923a19e973960dbf0", "warmup_time": -1}, "benchmarks.TimeSuite.time_saturation_vapor_pressure_grid": {"code": "class TimeSuite:\n    def time_saturation_vapor_pressure_grid(self):\n        \"\"\"Benchmark saturation vapor pressure on a grid.\"\"\"\n        saturation_vapor_pressure(self.slice.temperature)\n\n    def setup(self):\n        self.p = np.array([959., 779.2, 751.3, 724.3, 700., 269.]) * units.mbar\n        self.t = np.array([22.2, 14.6, 12., 9.4, 7., -38.]) * units.celsius\n        self.td = np.array([19., -11.2, -10.8, -10.4, -10., -53.2]) * units.celsius\n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_saturation_vapor_pressure_grid", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "907976f448bd5ac61107abced0671001f1ee20048d926409684ead4f2538c213", "warmup_time": -1}, "soundings_thermo.TimeSuite.time_bulk_shear": {"code": "class TimeSuite:\n    def time_bulk_shear(self):\n        \"\"\"Benchmarking calculating the bulk shear of a profile\"\"\"\n        bulk_shear(self.pressure_denver05282019, self.u, self.v);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "soundings_thermo.TimeSuite.time_bulk_shear", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a310e797f96059ab6f57e4bc3f9f094f82c4d3a37c3c13f6b6be4bd89098a00e", "warmup_time": -1}, "soundings_thermo.TimeSuite.time_ccl": {"code": "class TimeSuite:\n    def time_ccl(self):\n        \"\"\"Benchmarking calculating the convective condensation level of a profile\"\"\"\n        ccl(self.pressure_denver05282019, self.temperature_denver05282019, self.dewpoint_denver05282019);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "soundings_thermo.TimeSuite.time_ccl", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "13c6edd53c76b33fe91877221553e0b04276f021ffe6585b962f9d212b1cc6d3", "warmup_time": -1}, "soundings_thermo.TimeSuite.time_most_unstable_parcel": {"code": "class TimeSuite:\n    def time_most_unstable_parcel(self):\n        \"\"\"Benchmarking the calculation to find the most unstable parcel\"\"\"\n        most_unstable_parcel(self.pressure_denver05282019, self.temperature_denver05282019, self.dewpoint_denver05282019);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "soundings_thermo.TimeSuite.time_most_unstable_parcel", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "835a14a02d94684b1a1434edd766fc4baea2730329a8ac734ed8dae22945a447", "warmup_time": -1}, "soundings_thermo.TimeSuite.time_parcel_profile_with_lcl": {"code": "class TimeSuite:\n    def time_parcel_profile_with_lcl(self):\n        \"\"\"Benchmarking the atmospheric parcel profile with the lcl\"\"\"\n        parcel_profile_with_lcl(self.pressure_denver05282019, self.temperature_denver05282019, self.dewpoint_denver05282019);\n\n    def setup(self):\n        self.pressure_denver05282019 = [831, 809, 779.2, 750.7, 734, 722.9, 700, 669.8, 669, 645, 644.4, 619.8, 606,\n                                   601, 597, 596, 591, 555, 550.5, 527, 518, 516, 512, 501, 500, 489, 487.2, 482,\n                                   467.1, 447.9, 433, 422, 400, 399, 377.2, 356, 302, 300, 297, 250, 240.3, 236,\n                                   229.3, 227, 200, 190, 181.9, 165.9, 161, 158.4, 150, 137.5, 125, 119.2, 113.7, 108.4,\n                                   103, 101, 100, 89.5, 89.3, 85.1, 73.6, 70.1, 70, 66.8, 63.6, 60.6, 55, 54.7, 52.4,\n                                   50, 49.8, 47.5, 45.3, 39.2, 37.3, 33.9, 30.8, 30, 28, 22.1, 21.9, 21, 20, 19.3, 17.4, 17.2,\n                                   15.9, 15.3, 13.7, 13.2, 11, 10.4, 10] * units.hPa;\n    \n        self.temperature_denver05282019 = [6.8, 5.7, 4.2, 2.7, 1.8, 1.1, -0.5, -3, -3.1, -5.1, -5.2, -7.3, -8.5, -7.5, -9.1,\n                                      -9.1, -8.9, -14.3, -14.4, -14.7, -16.1, -19.1, -20.1, -21.3, -21.3, -22.1, -22.4,\n                                      -23.1, -24.5, -26.4, -27.9, -28.7, -31.3, -31.5, -34.5, -37.5, -41.5, -41.7,\n                                      -41.9, -49.1, -50.6, -51.3, -50.5, -50.2, -46.7, -45.5, -45.9, -46.6, -46.9,\n                                      -47.5, -49.7, -52.2, -54.8, -56.2, -57.5, -58.9, -60.3, -60.3, -59.3, -57.3,\n                                      -57.3, -57.8, -59.1, -59.5, -59.5, -59.2, -58.8, -58.4, -57.7, -57.7, -58.8,\n                                      -59.9, -60.3, -59.8, -59.4, -57.9, -57.5, -56.5, -55.5, -55.3, -54.5, -52,\n                                      -51.9, -52.3, -52.9, -52.9, -49.9, -49.5, -49.9, -50.1, -43.7, -43.7, -43.7,\n                                      -43.7, -42.9] * units.degC;\n        self.dewpoint_denver05282019 = [5.7, 4.6, 3.1, 1.6, 0.7, -0.1, -1.9, -5.8, -5.9, -6, -6.1, -8.6, -10.1, -8.9, -10.6,\n                                   -10.6, -10.4, -16.7, -16.7, -16.6, -18, -22.7, -27.1, -30.3, -30.3, -30.1, -31.7,\n                                   -36.1, -37.8, -40.1, -41.9, -38.7, -49.3, -49.5, -51, -52.5, -62.3, -62.7, -62.9,\n                                   -69.1, -68.6, -68.3, -68.7, -68.9, -70.7, -69.5, -69.9, -70.6, -70.9, -71.3, -72.7,\n                                   -74.2, -75.9, -76.7, -77.6, -78.4, -79.3, -79.3, -78.3, -77.3, -77.3, -77.3, -77.5,\n                                   -77.5, -77.5, -77.2, -76.8, -76.4, -75.7, -75.7, -75.3, -74.9, -75.3, -75, -74.7,\n                                   -73.9, -73.6, -73, -72.4, -72.3, -71.5, -69, -68.9, -68.5, -67.9, -68.9, -66.8,\n                                   -66.5, -66.9, -67.1, -63.7, -63.8, -64.5, -64.7, -63.9] * units.degC;\n    \n        self.winddir_denver05282019 = [340, 5, 5, 170, 167, 165, 170, 190, 189, 170, 170, 130, 133, 134, 135, 135, 138,\n                                  157, 160, 176, 182, 184, 186, 194, 195, 204, 205, 204, 200, 200, 203, 205, 210, 210,\n                                  205, 205, 205, 205, 205, 200, 200, 200, 205, 205, 225, 233, 240, 235, 196, 175, 180,\n                                  195, 210, 250, 225, 225, 240, 243, 245, 260, 260, 240, 265, 310, 310, 355, 35, 115,\n                                  115, 109, 55, 55, 55, 60, 65, 80, 105, 80, 90, 75, 55, 95, 91, 70, 65, 68, 75, 77,\n                                  90, 90, 90, 90, 110, 113, 115] * units.degrees;\n    \n    \n        self.windspd_denver05282019 = [ 3.6, 6.2, 4.6, 2.1, 3.3, 4.1, 4.1, 3.6, 3.6, 3.6, 3.6, 3.1, 4.0, 4.3, 4.6, 4.6, 4.6, 4.6, 4.6, 8.6,\n            10.2, 10.5, 11.2, 13.2, 13.4, 13.8, 13.9, 13.6, 12.9, 14.9, 19.1, 22.2, 28.8, 29.1, 34.5, 35.7, 39.1, 39.1,\n            39.3, 41.7, 40.7, 40.7, 43.2, 43.2, 28.8, 23.0, 18.0, 8.2, 5.9, 4.6, 6.2, 10.3, 8.2, 5.7, 5.2, 5.2, 10.3,\n            9.6, 9.3, 12.3, 12.4, 4.1, 4.1, 2.6, 1.0, 2.6, 4.1, 4.6, 0.5, 1.0, 5.2, 5.7, 6.0, 10.3, 9.3, 7.7, 10.3,\n            10.8, 7.2, 7.2, 6.2, 8.8, 8.3, 5.7, 9.8, 11.1, 14.9, 14.8, 13.9, 13.4, 11.8, 11.3, 7.2, 7.2, 7.2] * (units.m / units.s);\n    \n        self.u, self.v = wind_components(self.windspd_denver05282019, self.winddir_denver05282019);\n    \n        self.ds = index_xarray_data()\n        self.slice = self.ds.isel(isobaric=0)", "min_run_count": 2, "name": "soundings_thermo.TimeSuite.time_parcel_profile_with_lcl", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9daf0ba9966e5ea50acdc6397e883364e05501feb0cfb22d76c3e796d6452ed1", "warmup_time": -1}}, "machines": {"fv-az1336-544": {"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1336-544", "num_cpu": "4", "os": "Linux 6.11.0-1015-azure", "ram": "16379564", "version": 1}, "Jaye_Dell": {"arch": "AMD64", "cpu": "13th Gen Intel(R) Core(TM) i7-1360P", "machine": "Jaye_Dell", "num_cpu": "16", "os": "Windows 11", "ram": "32GB", "version": 1}, "letterman": {"arch": "arm64", "cpu": "Apple M2 Pro", "machine": "letterman", "num_cpu": "12", "os": "macOS Sequoia 15.2", "ram": "32GB", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}