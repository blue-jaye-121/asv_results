{"project": "metpy", "project_url": "https://unidata.github.io/MetPy/latest/", "show_commit_url": "http://github.com/unidata/metpy/commit/", "hash_length": 8, "revision_to_hash": {"327": "ab6c1dce403f7403c3ceb588536e8dac44208c63", "493": "b3ef1226fe06881448f1f1cf7fe308e6f8187c05", "536": "ac1fa42d9852eb0140cbdf42e2223b839ba13fde", "636": "5b4b97a6b9ef97f35fac6643b1d9caa395dbff55", "681": "db120ecf9d6094c3c0c3f2778d5cd4a4c776c773", "791": "363e313c36c0165991b07a219783774c97a38af8", "873": "421fcbc3f82fc104a2f48ea4d3b7b387cd945999", "974": "81c28f9b3547d0e08ce5d240354c69aa73f8b041", "995": "fd6f68542e1c1dbdb2ca9e68d24a1fc21a925649", "1011": "63a5224ce980cb44086685fe01eeaaed9998a698", "1112": "c2c19a3014bfb5f0d6b95bbbf9c8f9caadb17366", "1311": "2b685023351a89168a7e06c3858ff3493af670e7", "1332": "91ddb99935d9d0358b6b697bc1a0eabe9c96b145", "1575": "c5249c22782ca628fa328bbc28d98017dd868555", "1671": "d29088091fce085f52892539412e54c9eb02ab2e", "1787": "ba13b4c307791de6bfd69386959fe3da4efdeeeb", "2049": "987935135ac4770bd39c2902d48643866f29ef7e", "2158": "f47ebee7ce199b9d11d9db8fdf5cd258fd663052", "2160": "e4161106b5e060f525c58549f24efddd63aa35b6", "2186": "d0d44e898de3f5fb3d360152c06c5000e4bdba55", "2256": "cee9d4de5bc37a4cd2efc381f0a08f3a53d00940", "2369": "cdfad571efa697b7c081e405aeab3bc1ce8ced70", "2570": "a31af2335dfd3d28b6fff91ae21a86e2b565fa70", "2605": "8c1ca0ab748a253cc254317638bc080cfe323a3c", "2755": "0653de86b35b4c44ac7e6d47385d9b34cc822b76", "2850": "852e2cef374da385c0f1d0393bf5ae349dbd3bb7", "2919": "abad235b1e61f1048cf67c3fde06f4388e33bbbf", "3133": "776bacd1df2f8b98ebd475143da13dddd202fd06", "3333": "f8d2fcdb46bdfaf978f2b5d59a0d79ae185a1bb3", "3537": "bdc596470c925cdf91eec6df40deb5f638d002ee", "3726": "fabdf834f8717052c761e6b41a96fa064d9d2edb", "4083": "2f4de6683acdabdc87351eeafa58ff69f0904bee", "4521": "df6f7c543ec4278dfda4b609caee5dc232d52e41", "4677": "ed1b2c3c407b0998926b225167094474365bd763", "4887": "02084cc86bebd6a85f8c2dae493463421fc7563b", "5360": "8aa10736846a12e2aa976bbc5fcb591fb54c938c", "5469": "c8379a147d6542b729eed5ccb28b1ff0d883741c", "5661": "71b9b41a6ad63be051ea82e230c3dabf348e0ab1", "5718": "3d0238578e35f87a3bd48d77860d858c4ec3884a", "6180": "7a5e4cc34e62e632017335ca31b343cd79602538", "6196": "059cc1a45be63a2d86ba0801baa624e251bba487", "6197": "aef42710b63828f4d8cb05097f6562141ef293a2", "6202": "fcd883d749c0e596d8950f83ed26c7810e3b280d", "6210": "aa9f3cfd723bf8cef639b4e4aaae174fa223f473", "6242": "698f5441b5896aa6efdf84cdccaf711845a8bd23", "6252": "26e000da4e2f1d7e32e6fb81f88f6f35aa248528", "6277": "8ccabb740dd0afe3194b57b80d3af63b7f78671b", "6278": "d9752c8df8ed70b49da9ed98fb52db24d54a1f71", "6291": "bd432b3068744a605d5e8eeab472b167ba256012", "6295": "ccaf5095715327b75d1a92d98c91616eb607e0c5", "6311": "5fc0531fcab555b37e1c4d33e637ad72702b322c", "6315": "8f510ae51fe0478ba208711bb7468efca0296ade", "6324": "0ed75dc84c74d62be9b29321bb844289ed37eced", "6327": "846a2d0bbe707163e17289e514899e52653dcd09", "6331": "6b4c6ec864f35f6c53754d3708ea95dde519745c", "6338": "238d66dd5d7059ab5d812decfe40a8917c1df505", "6411": "3e9fbb1a08394026f68bb6e0bd8921287eccc272", "6421": "e3cca0b58a8d7eaf1ee98b4ef6be287112741bb7", "6423": "e7bdf2cdd4a0b0c8fd2a8642c239efb4386073cf", "6487": "7997bfe23acee896a864e53de74df34b4b0e2714", "6546": "1f7445489d2c928ce89a1708a6f515490f4747ac", "6557": "d00544a29193afb99747ad7297d0b7545b9c89b9", "6561": "34bfda1deaead3fed9070f3a766f7d842373c6d9", "6564": "0f69d91ca72342cb8750ec9cfde5687e9da76dba", "6566": "92cb09c80ce326e4825bc675ee453624a7f81aa7", "6577": "178a1f315415fad7f1565acf3c024d9b1d3202cf", "6592": "adb673a900dbd3b1415176582844f7e8fac9de5d", "6609": "e2a40071e2c928bfe1bc0ea2773589565794b1a6", "6610": "95ed74dad477bb29317ca082e9334e5b42bd6719", "6620": "bbe27bb3c4119a46b103d28954163e2d8991c3b5", "6643": "4f8392dca28f1c1a25def284680bd7e8939aed63", "6665": "ad73a2740fa1f676f4ccdfd7e97c29b088f02692", "6673": "b3f130bb3614cbdc00344a9ed5fb3336b49fe065", "6684": "2bb4d5672700871970644d0ac25b8d0045108db1", "6689": "29f28d4f2d46587fc401b6864fcd3bb6e294eac8", "6700": "86f704d82a140a31ef17cf75c30ed12e6a43bf56", "6714": "22bfb4fab7155706ac0b93f70d41dec201eb0c86", "6728": "8251fed3ff5ff1bbc777f5d9f4d3aff4cb259d76", "6731": "9a46a10e0b2cee3da4fae5bc940973c88ceeedf1", "6755": "31bd7351b0f54e32c7adc20e5d3dde4a4107d350", "6756": "c49e8e3c90d4b7a954695e85c603339aacf53e96", "6792": "82e91cb0679752d856698f686c50f243c9fe7a26", "6793": "ea2fcfc186a45b67a942e9af4c98f6bd4922a025", "6796": "9451c3fd89e8d2e89436b27e4c82fdcbdaa4836c", "6799": "fd1fc47ed54a1c9d8b26d09ff00e85b43672cec6", "6839": "c1cf542fdfe44ef97c765deb4dbaca41a05f4d42", "6845": "ca236e5cd87855ac14a1bd33bb56fcac3949a9cf", "6887": "c4adcaaa5662d2527e5949789736bb48f0ecc34c", "6889": "2fbe8ed7dc3db2b46edc8112ad92407be0ff2bfc", "6896": "0fa6c12e535053bbb0de04172819048e6e7984ee", "6897": "cb699d27120b8360c4dc9dac3cb4593676dab7db", "6905": "e4aa15ffb111d64d8a4615f526ae6147268746ad", "6910": "8238486e6b3888aa10821a5c39f41cd762d3bd14", "6923": "b28b9212e3dbbb1fe6ce545fd34e1549c83206e9", "6929": "3128d2748b145196ad5beb043b4eeb8604cddd45", "6932": "fbab112b8237e056386632d593875369ee794c6d"}, "revision_to_date": {"327": 1290647504000, "493": 1429732381000, "536": 1430251162000, "636": 1431642261000, "681": 1436841550000, "791": 1454953711000, "873": 1466209240000, "974": 1476220957000, "995": 1478293805000, "1011": 1479485135000, "1112": 1483837378000, "1311": 1491277186000, "1332": 1492799080000, "1575": 1505496880000, "1671": 1509724629000, "1787": 1515091831000, "2049": 1526585670000, "2158": 1535393819000, "2160": 1535408456000, "2186": 1538238761000, "2256": 1546740725000, "2369": 1557951012000, "2570": 1569851965000, "2605": 1571350796000, "2755": 1578279372000, "2850": 1579011679000, "2919": 1587169421000, "3133": 1596700572000, "3333": 1602221744000, "3537": 1608612372000, "3726": 1619650767000, "4083": 1628528526000, "4521": 1642802071000, "4677": 1649274046000, "4887": 1656646791000, "5360": 1671832867000, "5469": 1678732726000, "5661": 1684280185000, "5718": 1688691406000, "6180": 1703744858000, "6196": 1704403423000, "6197": 1704403894000, "6202": 1704907218000, "6210": 1705104764000, "6242": 1707858385000, "6252": 1707944418000, "6277": 1708552520000, "6278": 1708554183000, "6291": 1709158990000, "6295": 1709765867000, "6311": 1710361580000, "6315": 1710444021000, "6324": 1711046879000, "6327": 1711057528000, "6331": 1711144978000, "6338": 1712075129000, "6411": 1715374854000, "6421": 1716646561000, "6423": 1716942856000, "6487": 1720546095000, "6546": 1723843138000, "6557": 1724363894000, "6561": 1724684367000, "6564": 1724794822000, "6566": 1724877949000, "6577": 1724886189000, "6592": 1725039470000, "6609": 1725566137000, "6610": 1725566243000, "6620": 1725911249000, "6643": 1727904228000, "6665": 1729103093000, "6673": 1729542769000, "6684": 1730148420000, "6689": 1730415369000, "6700": 1730917839000, "6714": 1731372767000, "6728": 1732203262000, "6731": 1732310761000, "6755": 1733855270000, "6756": 1733857214000, "6792": 1736202215000, "6793": 1736203408000, "6796": 1736205962000, "6799": 1736457649000, "6839": 1738953630000, "6845": 1739401390000, "6887": 1743616269000, "6889": 1743716913000, "6896": 1744220391000, "6897": 1744309507000, "6905": 1745267416000, "6910": 1745857327000, "6923": 1745961194000, "6929": 1746040064000, "6932": 1739555552000}, "params": {"arch": ["AMD64", "x86_64"], "cpu": ["13th Gen Intel(R) Core(TM) i7-1360P", "AMD EPYC 7763 64-Core Processor"], "machine": ["Jaye_Dell", "fv-az1393-812"], "num_cpu": ["16", "4"], "os": ["Linux 6.11.0-1015-azure", "Windows 11"], "ram": ["16379564", "32GB"], "python": ["3.12", "3.13"], "matplotlib": [""], "numpy": [""], "pandas": [""], "pint": [""], "pooch": [""], "pyproj": [""], "scipy": [""], "traitlets": [""], "xarray": [""], "netcdf4": [""], "branch": ["HEAD"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1393-812", "num_cpu": "4", "os": "Linux 6.11.0-1015-azure", "ram": "16379564", "python": "3.13", "matplotlib": "", "numpy": "", "pandas": "", "pint": "", "pooch": "", "pyproj": "", "scipy": "", "traitlets": "", "xarray": "", "netcdf4": "", "branch": "HEAD"}], "benchmarks": {"bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_frequency": {"code": "class TimeSuite:\n    def time_brunt_vaisala_frequency(self):\n        \"\"\"Benchmark Brunt Vaisala frequency calculation - on a grid\"\"\"\n        mpcalc.brunt_vaisala_frequency(self.timeSlice.height, self.timeSlice.theta);\n\n    def setup(self):\n        self.ds = makeXArray();\n        self.timeSlice = self.ds.isel(time = 0)\n        self.pressureSlice = self.ds.isel(pressure = 0)", "min_run_count": 2, "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_frequency", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "2025.06.06", "warmup_time": -1}, "bound_layer_turbulence_benchmarks.TimeSuite.time_gradient_richardson_number": {"code": "class TimeSuite:\n    def time_gradient_richardson_number(self):\n        \"\"\"Benchmark Graident Richardson Number on a grid\"\"\"\n        mpcalc.gradient_richardson_number(self.timeSlice.height, self.timeSlice.theta,\n                                         self.timeSlice.uwind, self.timeSlice.vwind)\n\n    def setup(self):\n        self.ds = makeXArray();\n        self.timeSlice = self.ds.isel(time = 0)\n        self.pressureSlice = self.ds.isel(pressure = 0)", "min_run_count": 2, "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_gradient_richardson_number", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "2025.06.06", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_density": {"code": "class TimeSuite:\n    def time_density(self, pressureSlice):\n        \"\"\"Benchmarking density calculation on a 2d surface\"\"\"\n        mpcalc.density(self.pressureSlice.pressure, self.pressureSlice.temperature, self.pressureSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_density", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_dry_lapse": {"code": "class TimeSuite:\n    def time_dry_lapse(self, timeSlice):\n        \"\"\"Benchmarking the dry lapse calculation on a 3d cube\"\"\"\n        mpcalc.dry_lapse(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_dry_lapse", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential": {"code": "class TimeSuite:\n    def time_height_to_geopotential(self, timeSlice):\n        \"\"\"Benchmarking the height to geopotenial calculation on a 3d cube\"\"\"\n        mpcalc.height_to_geopotential(self.timeSlice.height);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_potential_temperature": {"code": "class TimeSuite:\n    def time_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking the potential temperature calculation on a 3d cube\"\"\"\n        mpcalc.potential_temperature(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_potential_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_static_stability": {"code": "class TimeSuite:\n    def time_static_stability(self, timeSlice):\n        \"\"\"Benchmarking static stability calculation on a 3d cube\"\"\"\n        mpcalc.static_stability(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_static_stability", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic": {"code": "class TimeSuite:\n    def time_thickness_hydrostatic(self, timeSlice):\n        \"\"\"Benchmarking hydrostatic thickness calculation on a 3d cube\"\"\"\n        mpcalc.thickness_hydrostatic(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_absolute_vorticity": {"code": "class TimeSuite:\n    def time_absolute_vorticity(self, pressureSlice):\n        \"\"\"benchmarking absolute momentum calculation on a 2d surface\"\"\"\n        mpcalc.absolute_vorticity(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_absolute_vorticity", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.10", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_advection": {"code": "class TimeSuite:\n    def time_advection(self, timeSlice):\n        \"\"\"Benchmarking the advection calculation of t on a 3d cube\"\"\"\n        mpcalc.advection(self.timeSlice.temperature, self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_advection", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.10", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_ageostrophic_wind": {"code": "class TimeSuite:\n    def time_ageostrophic_wind(self, pressureSlice):\n        \"\"\"Benchmarking ageostrophic wind calculation on a 2d surface\"\"\"\n        mpcalc.ageostrophic_wind(self.pressureSlice.height, self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_ageostrophic_wind", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.10", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_frontogenesis": {"code": "class TimeSuite:\n    def time_frontogenesis(self, pressureSlice):\n        \"\"\"Benchmarking the calculation of frontogenesis of a 2d field\"\"\"\n        mpcalc.frontogenesis(self.pressureSlice.theta, self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_frontogenesis", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.10", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_barotropic": {"code": "class TimeSuite:\n    def time_potential_vorticity_barotropic(self, timeSlice):\n        \"\"\"Benchmarking the barotropic potential vorticity calculation on a cube\"\"\"\n        mpcalc.potential_vorticity_barotropic(self.timeSlice.height, self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_barotropic", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.10", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_q_vector": {"code": "class TimeSuite:\n    def time_q_vector(self, pressureSlice):\n        \"\"\"Benchmarking q vector calculation on a 2d slice\"\"\"\n        mpcalc.q_vector(self.pressureSlice.uwind, self.pressureSlice.vwind,\n                        self.pressureSlice.temperature, self.pressureSlice.pressure);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_q_vector", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.10", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_total_deformation": {"code": "class TimeSuite:\n    def time_total_deformation(self, pressureSlice):\n        \"\"\"Benchmarking total deformation calculation on a 2d slice\"\"\"\n        mpcalc.total_deformation(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_total_deformation", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.10", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_vorticity": {"code": "class TimeSuite:\n    def time_vorticity(self, pressureSlice):\n        \"\"\"Benchmarking vorticity calculation on a 2d slice\"\"\"\n        mpcalc.vorticity(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_vorticity", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.10", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_dewpoint": {"code": "class TimeSuite:\n    def time_dewpoint(self, timeSlice):\n        \"\"\"Benchmarking dewpoint from vapor pressure on a 3d cube\"\"\"\n        mpcalc.dewpoint(self.timeSlice.vapor_pressure);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh": {"code": "class TimeSuite:\n    def time_dewpoint_from_rh(self, timeSlice):\n        \"\"\"Benchmarking dewpoint from calculated on a 3d cube\"\"\"\n        mpcalc.dewpoint_from_relative_humidity(self.timeSlice.temperature, self.timeSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_precipitable_water": {"code": "class TimeSuite:\n    def time_precipitable_water(self, timeSlice):\n        \"\"\"Benchmarking precipitable water calculation for one column\"\"\"\n        mpcalc.precipitable_water(self.timeSlice.pressure, self.timeSlice.dewpoint[0][0]);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_precipitable_water", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio": {"code": "class TimeSuite:\n    def time_rh_from_mixing_ratio(self, timeSlice):\n        \"\"\"Benchmarking relative humidity from mixing ratio on a 3d cube\"\"\"\n        mpcalc.relative_humidity_from_mixing_ratio(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_saturation_vapor_pressure": {"code": "class TimeSuite:\n    def time_saturation_vapor_pressure(self, timeSlice):\n        \"\"\"Benchmarking the saturation vapor pressure calculation for a 3d cube\"\"\"\n        mpcalc.saturation_vapor_pressure(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_saturation_vapor_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_scale_height": {"code": "class TimeSuite:\n    def time_scale_height(self, pressureSlice):\n        \"\"\"Benchmarking the calculation for the scale height of a layer for 2 surfaces\"\"\"\n        mpcalc.scale_height(self.upperSlice.temperature, self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_scale_height", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature": {"code": "class TimeSuite:\n    def time_virtual_temperature(self, timeSlice):\n        \"\"\"Benchmark virtual temperature on a 3d cube.\"\"\"\n        mpcalc.virtual_temperature(self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature": {"code": "class TimeSuite:\n    def time_wet_bulb_temperature(self, pressureSlice):\n        \"\"\"Benchmarking wet bulb temperature calculation on on a cube\"\"\"\n        mpcalc.wet_bulb_temperature(self.pressureSlice.pressure, self.pressureSlice.temperature, self.pressureSlice.dewpoint);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_bulk_shear": {"code": "class TimeSuite:\n    def time_bulk_shear(self, profileSlice):\n        \"\"\"Benchmarking calculating the bulk shear of a profile\"\"\"\n        mpcalc.bulk_shear(self.profileSlice.pressure, self.profileSlice.uwind, self.profileSlice.vwind);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_bulk_shear", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:10", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_cape_cin": {"code": "class TimeSuite:\n    def time_cape_cin(self, profileSlice):\n        \"\"\"Benchmarking cape_cin calculation for one profile\"\"\"\n        mpcalc.cape_cin(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint, self.parcelProfile);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_cape_cin", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:10", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_ccl": {"code": "class TimeSuite:\n    def time_ccl(self, profileSlice):\n        \"\"\"Benchmarking calculating the convective condensation level of a profile\"\"\"\n        mpcalc.ccl(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_ccl", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:10", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_el": {"code": "class TimeSuite:\n    def time_el(self, profileSlice):\n        \"\"\"Benchmarks el calculation on one profile\"\"\"\n        mpcalc.el(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_el", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:10", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_lcl": {"code": "class TimeSuite:\n    def time_lcl(self, timeSlice):\n        \"\"\"Benchmarks lcl on a 3d cube - many profiles\"\"\"\n        mpcalc.lcl(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_lcl", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:10", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_most_unstable_parcel": {"code": "class TimeSuite:\n    def time_most_unstable_parcel(self, profileSlice):\n        \"\"\"Benchmarking the calculation to find the most unstable parcel for one profile\"\"\"\n        mpcalc.most_unstable_parcel(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_most_unstable_parcel", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:10", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_parcel_profile": {"code": "class TimeSuite:\n    def time_parcel_profile(self, profileSlice):\n        \"\"\"Benchmarking the atmospheric parcel profile for one profile\"\"\"\n        mpcalc.parcel_profile(self.profileSlice.pressure, self.profileSlice.temperature[0], self.profileSlice.dewpoint[0]);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_parcel_profile", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:10", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}}, "machines": {"fv-az1393-812": {"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1393-812", "num_cpu": "4", "os": "Linux 6.11.0-1015-azure", "ram": "16379564", "version": 1}, "Jaye_Dell": {"arch": "AMD64", "cpu": "13th Gen Intel(R) Core(TM) i7-1360P", "machine": "Jaye_Dell", "num_cpu": "16", "os": "Windows 11", "ram": "32GB", "version": 1}}, "tags": {"v0.10.0": 2256, "v0.10.2": 2369, "v0.11.0": 2570, "v0.11.1": 2605, "v0.12.0": 2755, "v0.12.1": 2919, "v0.12.2": 3133, "v0.2.1": 681, "v0.3.0": 791, "v0.3.1": 873, "v0.4.0": 974, "v0.4.1": 995, "v0.4.2": 1011, "v0.4.3": 1112, "v0.5.0": 1311, "v0.5.1": 1332, "v0.6.0": 1575, "v0.6.1": 1671, "v0.7.0": 1787, "v0.8.0": 2049, "v0.9.0": 2158, "v0.9.1": 2160, "v0.9.2": 2186, "v1.0": 3537, "v1.0.0": 3537, "v1.0.0rc1": 2850, "v1.0.0rc2": 3333, "v1.0.1": 3726, "v1.1.0": 4083, "v1.2.0": 4521, "v1.3.0": 4677, "v1.3.1": 4887, "v1.4.0": 5360, "v1.4.1": 5469, "v1.5.0": 5661, "v1.5.1": 5718, "v1.6.0": 6180, "v1.6.1": 6202, "v1.6.2": 6338, "v1.6.3": 6561, "v1.7.0": 6932, "theAttic": 327, "v0.1.0": 493, "v0.1.1": 536, "v0.2.0": 636}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}